// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract Treasury {
    address public owner;
    mapping(address => uint256) public treasuryBalances;

    event TreasuryDeposit(address indexed user, uint256 amount);
    event TreasuryWithdraw(address indexed user, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function depositToTreasury(address user, uint256 amount) external onlyOwner {
        require(amount > 0, "Amount must be greater than 0");
        treasuryBalances[user] += amount;
        emit TreasuryDeposit(user, amount);
    }

    function withdrawFromTreasury(address user, uint256 amount) external onlyOwner {
        require(amount > 0, "Amount must be greater than 0");
        require(treasuryBalances[user] >= amount, "Insufficient treasury balance");
        treasuryBalances[user] -= amount;
        emit TreasuryWithdraw(user, amount);
    }
}

contract StableCoin {
    string public name = "Digital Software Exchange";
    string public symbol = "DSX";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    address public owner;
    address public originator;

    // The stablecoin's price target
    uint256 public targetPrice;

    // Chainlink Oracle
    AggregatorV3Interface public oracle;

    // Fiat currency address and exchange rate
    address public fiatCurrency;
    uint256 public exchangeRate; // StableCoin to FiatCurrency rate (e.g., 1 DSX = 1 USD, EUR, CHF, CNY, RUB, GBP, AUD, RAND, 187 COUNTRIES)

    // Depository balances
    mapping(address => uint256) public depositoryBalances;

    // Custodial services
    mapping(address => bool) public custodialServices;

    // Digital Debit Card balances
    mapping(address => uint256) public cardBalances;

    // Separate Treasury contract
    Treasury public treasury;

    modifier onlyOwnerOrOriginator() {
        require(msg.sender == owner || msg.sender == originator, "Only the owner or originator can call this function");
        _;
    }

    constructor(
        address _oracleAddress,
        address _fiatCurrency,
        uint256 initialSupply,
        uint256 initialExchangeRate,
        address _originator
    ) {
        totalSupply = initialSupply * (10**uint256(decimals));
        balanceOf[msg.sender] = totalSupply;
        owner = msg.sender;
        originator = _originator;

        // Initialize the Chainlink Oracle
        oracle = AggregatorV3Interface(_oracleAddress);

        // Set the fiat currency address and initial exchange rate
        fiatCurrency = _fiatCurrency;
        exchangeRate = initialExchangeRate;

        // Set an initial target price (adjust as needed)
        targetPrice = 1000000; // Example: $1.00

        // Initialize the Treasury contract
        treasury = new Treasury();
    }

    function setOriginator(address _originator) external onlyOwner {
        require(_originator != address(0), "Invalid originator address");
        originator = _originator;
    }

    // Load funds onto the digital debit card
    function loadCard(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        // Update user's stablecoin balance and card balance
        balanceOf[msg.sender] -= amount;
        cardBalances[msg.sender] += amount;

        emit Transfer(msg.sender, address(this), amount);
    }

    // Spend funds from the digital debit card
    function spendFromCard(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(cardBalances[msg.sender] >= amount, "Insufficient card balance");

        // Update card balance and transfer funds back to user
        cardBalances[msg.sender] -= amount;
        balanceOf[msg.sender] += amount;

        emit Transfer(address(this), msg.sender, amount);
    }

    // Check the balance of the digital debit card
    function getCardBalance() external view returns (uint256) {
        return cardBalances[msg.sender];
    }

    // Deposit stablecoins into the treasury
    function treasuryDeposit(uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        // Update user's stablecoin balance and deposit to the Treasury contract
        balanceOf[msg.sender] -= amount;
        treasury.depositToTreasury(msg.sender, amount);

        emit Transfer(msg.sender, address(this), amount);
    }

    // Withdraw stablecoins from the treasury
    function treasuryWithdraw(uint256 amount) external onlyOwnerOrOriginator {
        require(amount > 0, "Amount must be greater than 0");
        require(treasury.treasuryBalances(msg.sender) >= amount, "Insufficient treasury balance");

        // Withdraw from the Treasury contract and update user's stablecoin balance
        treasury.withdrawFromTreasury(msg.sender, amount);
        balanceOf[msg.sender] += amount;

        emit Transfer(address(this), msg.sender, amount);
    }

    // Transfer stablecoins to another address
    function transfer(address to, uint256 amount) external returns (bool) {
        require(to != address(0), "Invalid address");
        require(amount > 0, "Amount must be greater than 0");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");
        require(balanceOf[to] + amount >= balanceOf[to], "Overflow detected");

        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;

        emit Transfer(msg.sender, to, amount);
        return true;
    }

    // ... (other contract functions)
}

contract TMS541 is StableCoin {
    struct Client {
        address addr;
        uint256 balance;
    }

    mapping(address => Client) public clients;

    event ClientAdded(address indexed addr);
    event ClientRemoved(address indexed addr);

    modifier onlyClient() {
        require(clients[msg.sender].addr == msg.sender, "Only authorized clients can call this function");
        _;
    }

    function addClient(address clientAddress) external onlyOwner {
        clients[clientAddress] = Client(clientAddress, 0);
        emit ClientAdded(clientAddress);
    }

    function removeClient(address clientAddress) external onlyOwner {
        delete clients[clientAddress];
        emit ClientRemoved(clientAddress);
    }

    function transferToClient(address clientAddress, uint256 amount) external onlyClient {
        require(amount > 0, "Amount must be greater than 0");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        // Transfer stablecoins from the sender to the client's balance
        balanceOf[msg.sender] -= amount;
        clients[clientAddress].balance += amount;

        emit Transfer(msg.sender, clientAddress, amount);
    }

    function transferFromClient(address clientAddress, uint256 amount) external onlyClient {
        require(amount > 0, "Amount must be greater than 0");
        require(clients[clientAddress].balance >= amount, "Insufficient client balance");

        // Transfer stablecoins from the client's balance to the sender
        clients[clientAddress].balance -= amount;
        balanceOf[msg.sender] += amount;

        emit Transfer(clientAddress, msg.sender, amount);
    }

    function pay(address recipient, uint256 amount) external returns (bool) {
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Amount must be greater than 0");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        // Transfer stablecoins from the sender to the recipient
        balanceOf[msg.sender] -= amount;
        balanceOf[recipient] += amount;

        emit Transfer(msg.sender, recipient, amount);
        return true;
    }
}
