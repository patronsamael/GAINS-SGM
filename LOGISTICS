import pandas as pd
import numpy as np
import yfinance as yf

class BankAccount:
    def __init__(self, account_number, account_holder, balance, currency):
        self.account_number = account_number
        self.account_holder = account_holder
        self.balance = balance
        self.currency = currency

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if self.balance >= amount:
            self.balance -= amount
        else:
            print("Insufficient funds")

    def clear_check(self, check_amount):
        self.withdraw(check_amount)
        print(f"Check cleared for {check_amount} {self.currency}")

    def transfer_funds(self, target_account, amount):
        if self.balance >= amount:
            self.withdraw(amount)
            target_account.deposit(amount)
            print(f"Transferred {amount} {self.currency} to Account {target_account.account_number}")
        else:
            print("Insufficient funds")

    def invest_funds(self, investment_amount):
        print(f"Investing {investment_amount} {self.currency} in the stock market")
        # Add the logic to invest the funds in the stock market

    def display_balance(self):
        print(f"Account Holder: {self.account_holder}")
        print(f"Account Number: {self.account_number}")
        print(f"Balance: {self.balance} {self.currency}")

    def deduct_shipping_costs(self, shipping_cost):
        if self.balance >= shipping_cost:
            self.withdraw(shipping_cost)
            print(f"Deducted shipping cost: {shipping_cost} {self.currency}")
        else:
            print("Insufficient funds for shipping costs")
import numpy as np
import pandas as pd
import yfinance as yf

class Shipping:
    def __init__(self, container_value, ship_value, goods_value):
        self.container_value = container_value
        self.ship_value = ship_value
        self.goods_value = goods_value
        self.shipping_indexes = np.array([])
        self.stock_values = {}

    def calculate_insurance_cost(self):
        # Placeholder logic for calculating insurance cost based on values
        total_insurance_cost = self.container_value + self.ship_value + self.goods_value
        return total_insurance_cost

    def fetch_stock_values(self, symbols):
        # Fetch real-time stock values for the given symbols using yfinance
        stock_data = yf.download(symbols, period="1d")["Close"]
        for symbol in symbols:
            self.stock_values[symbol] = stock_data[symbol].iloc[-1]

    def calculate_market_value(self, volatility_factor=1.0):
        # Placeholder logic for calculating overall market value based on stock values and volatility
        total_stock_value = sum(self.stock_values.values())
        market_value = total_stock_value * volatility_factor
        return market_value

    def update_shipping_indexes(self, new_values):
        # Update the shipping indexes with real-time values
        self.shipping_indexes = np.append(self.shipping_indexes, new_values)

    def get_real_time_allocation(self):
        # Placeholder logic for calculating real-time allocation based on shipping indexes
        if len(self.shipping_indexes) > 0:
            # Calculate allocation based on the latest shipping indexes
            allocation = np.random.rand(len(self.shipping_indexes))
            return allocation
        else:
            return np.array([])

# Example usage
container_value = 50000
ship_value = 1000000
goods_value = 200000

shipping_instance = Shipping(container_value, ship_value, goods_value)

# Fetch real-time stock values of shipping companies for the index
symbols = ['MSC', 'AMKBY', 'HPGLY', 'CICOY']
shipping_instance.fetch_stock_values(symbols)

# Calculate insurance cost
insurance_cost = shipping_instance.calculate_insurance_cost()
print(f"Total Insurance Cost: {insurance_cost}")

# Simulate real-time updates to shipping indexes
new_values = np.array([150, 155, 160, 158])
shipping_instance.update_shipping_indexes(new_values)

# Get real-time allocation based on shipping indexes
allocation = shipping_instance.get_real_time_allocation()
print(f"Real-time Allocation: {allocation}")

# Calculate overall market value based on stock values and volatility
market_value = shipping_instance.calculate_market_value(volatility_factor=1.2)
print(f"Overall Market Value: {market_value}")



class RiskTool:
    @staticmethod
    def calculate_covariance(asset1_returns, asset2_returns):
        covariance = np.cov(asset1_returns, asset2_returns)[0, 1]
        return covariance

    @staticmethod
    def calculate_variance(returns):
        variance = np.var(returns)
        return variance


def get_fiscal_year_data(ticker, year):
    # Fetch data from Yahoo Finance for the given ticker and year
    start_date = f"{year}-01-01"
    end_date = f"{year}-12-31"
    data = yf.download(ticker, start=start_date, end=end_date)
    return data


def find_lowest_and_highest_prices(data):
    # Find the lowest and highest prices for the ticker
    lowest_price = data['Low'].min()
    highest_price = data['High'].max()
    return lowest_price, highest_price


def find_largest_change_one_day(data):
    # Calculate the largest change in the market on one day
    data['Daily_Change'] = data['Close'].diff()
    largest_change_one_day = data['Daily_Change'].abs().max()
    return largest_change_one_day


def find_largest_change_two_days(data):
    # Calculate the largest change in the market over two consecutive days
    data['Two_Day_Change'] = data['Close'].diff(periods=2)
    largest_change_two_days = data['Two_Day_Change'].abs().max()
    return largest_change_two_days


def calculate_average_moving_trade_volume(data, window=5):
    # Calculate the average moving trade volume
    data['Avg_Moving_Trade_Volume'] = data['Volume'].rolling(window=window).mean()
    avg_moving_trade_volume = data['Avg_Moving_Trade_Volume'].mean()
    return avg_moving_trade_volume


if __name__ == "__main__":
    # Test the functionalities
    # Create bank accounts and perform transactions
    account1 = BankAccount("123456789", "John Doe", 1000.0, "USD")
    account2 = BankAccount("987654321", "Jane Smith", 500.0, "USD")

    account1.display_balance()
    account2.display_balance()

    account1.deposit(500.0)
    account1.display_balance()

    account1.withdraw(200.0)
    account1.display_balance()

    check_amount = 300.0
    account1.clear_check(check_amount)
    account1.display_balance()

    transfer_amount = 400.0
    account1.transfer_funds(account2, transfer_amount)
    account1.display_balance()
    account2.display_balance()

    # Invest funds in the stock market
    investment_amount = 1000.0
    account1.invest_funds(investment_amount)

    # Financial data analysis for MSC for the fiscal year of 2023
    ticker = "MSC"
    fiscal_year = 2023

    data = get_fiscal_year_data(ticker, fiscal_year)

    lowest_price, highest_price = find_lowest_and_highest_prices(data)
    print("Lowest Price:", lowest_price)
    print("Highest Price:", highest_price)

    largest_change_one_day = find_largest_change_one_day(data)
    print("Largest Change in One Day:", largest_change_one_day)

    largest_change_two_days = find_largest_change_two_days(data
