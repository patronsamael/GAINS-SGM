import math
import numpy as np

def logistic_map_with_imaginary_conditions(lambda_val, initial_value, num_iterations):
    result = [initial_value]
    for _ in range(num_iterations - 1):
        current_value = result[-1]
        next_value = lambda_val * current_value * (1 - current_value)
        
        # Calculate the positive or negative average of imaginary numbers
        imaginary_average = np.mean(np.imag(next_value))

        # Check the conditions involving the imaginary average
        condition_range_next = (
            np.sum(np.zeros_like(result)) <= next_value <= math.factorial(int(next_value * 100)) / 100 and
            imaginary_average <= np.sum(np.zeros_like(result))
        )

        condition_range_current = (
            np.sum(np.zeros_like(result)) <= current_value + 1 <= math.factorial(int((current_value + 1) * 100)) / 100 and
            imaginary_average >= -np.sum(np.zeros_like(result))
        )

        # If both conditions are met, append the next value; otherwise, break the loop
        if condition_range_next and condition_range_current:
            result.append(next_value)
        else:
            break
    
    return result

# Example usage
lambda_val = 2.5
initial_value = 0.2
num_iterations = 100

sequence = logistic_map_with_imaginary_conditions(lambda_val, initial_value, num_iterations)
print(sequence)
